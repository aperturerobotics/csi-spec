// Code generated by protoc-gen-srpc. DO NOT EDIT.
// protoc-gen-srpc version: v0.14.0
// source: github.com/aperturerobotics/csi-spec/csi.proto

package csi_v1

import (
	context "context"

	srpc "github.com/aperturerobotics/starpc/srpc"
)

type SRPCIdentityClient interface {
	SRPCClient() srpc.Client

	GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest) (*GetPluginInfoResponse, error)
	GetPluginCapabilities(ctx context.Context, in *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error)
	Probe(ctx context.Context, in *ProbeRequest) (*ProbeResponse, error)
}

type srpcIdentityClient struct {
	cc        srpc.Client
	serviceID string
}

func NewSRPCIdentityClient(cc srpc.Client) SRPCIdentityClient {
	return &srpcIdentityClient{cc: cc, serviceID: SRPCIdentityServiceID}
}

func NewSRPCIdentityClientWithServiceID(cc srpc.Client, serviceID string) SRPCIdentityClient {
	if serviceID == "" {
		serviceID = SRPCIdentityServiceID
	}
	return &srpcIdentityClient{cc: cc, serviceID: serviceID}
}

func (c *srpcIdentityClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcIdentityClient) GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest) (*GetPluginInfoResponse, error) {
	out := new(GetPluginInfoResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "GetPluginInfo", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcIdentityClient) GetPluginCapabilities(ctx context.Context, in *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error) {
	out := new(GetPluginCapabilitiesResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "GetPluginCapabilities", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcIdentityClient) Probe(ctx context.Context, in *ProbeRequest) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "Probe", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type SRPCIdentityServer interface {
	GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error)
	GetPluginCapabilities(context.Context, *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error)
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
}

type SRPCIdentityUnimplementedServer struct{}

func (s *SRPCIdentityUnimplementedServer) GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCIdentityUnimplementedServer) GetPluginCapabilities(context.Context, *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCIdentityUnimplementedServer) Probe(context.Context, *ProbeRequest) (*ProbeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

const SRPCIdentityServiceID = "csi.v1.Identity"

type SRPCIdentityHandler struct {
	serviceID string
	impl      SRPCIdentityServer
}

// NewSRPCIdentityHandler constructs a new RPC handler.
// serviceID: if empty, uses default: csi.v1.Identity
func NewSRPCIdentityHandler(impl SRPCIdentityServer, serviceID string) srpc.Handler {
	if serviceID == "" {
		serviceID = SRPCIdentityServiceID
	}
	return &SRPCIdentityHandler{impl: impl, serviceID: serviceID}
}

// SRPCRegisterIdentity registers the implementation with the mux.
// Uses the default serviceID: csi.v1.Identity
func SRPCRegisterIdentity(mux srpc.Mux, impl SRPCIdentityServer) error {
	return mux.Register(NewSRPCIdentityHandler(impl, ""))
}

func (d *SRPCIdentityHandler) GetServiceID() string { return d.serviceID }

func (SRPCIdentityHandler) GetMethodIDs() []string {
	return []string{
		"GetPluginInfo",
		"GetPluginCapabilities",
		"Probe",
	}
}

func (d *SRPCIdentityHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "GetPluginInfo":
		return true, d.InvokeMethod_GetPluginInfo(d.impl, strm)
	case "GetPluginCapabilities":
		return true, d.InvokeMethod_GetPluginCapabilities(d.impl, strm)
	case "Probe":
		return true, d.InvokeMethod_Probe(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCIdentityHandler) InvokeMethod_GetPluginInfo(impl SRPCIdentityServer, strm srpc.Stream) error {
	req := new(GetPluginInfoRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.GetPluginInfo(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCIdentityHandler) InvokeMethod_GetPluginCapabilities(impl SRPCIdentityServer, strm srpc.Stream) error {
	req := new(GetPluginCapabilitiesRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.GetPluginCapabilities(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCIdentityHandler) InvokeMethod_Probe(impl SRPCIdentityServer, strm srpc.Stream) error {
	req := new(ProbeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.Probe(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

type SRPCIdentity_GetPluginInfoStream interface {
	srpc.Stream
	SendAndClose(*GetPluginInfoResponse) error
}

type srpcIdentity_GetPluginInfoStream struct {
	srpc.Stream
}

func (x *srpcIdentity_GetPluginInfoStream) SendAndClose(m *GetPluginInfoResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCIdentity_GetPluginCapabilitiesStream interface {
	srpc.Stream
	SendAndClose(*GetPluginCapabilitiesResponse) error
}

type srpcIdentity_GetPluginCapabilitiesStream struct {
	srpc.Stream
}

func (x *srpcIdentity_GetPluginCapabilitiesStream) SendAndClose(m *GetPluginCapabilitiesResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCIdentity_ProbeStream interface {
	srpc.Stream
	SendAndClose(*ProbeResponse) error
}

type srpcIdentity_ProbeStream struct {
	srpc.Stream
}

func (x *srpcIdentity_ProbeStream) SendAndClose(m *ProbeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCControllerClient interface {
	SRPCClient() srpc.Client

	CreateVolume(ctx context.Context, in *CreateVolumeRequest) (*CreateVolumeResponse, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	ControllerPublishVolume(ctx context.Context, in *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, error)
	ControllerUnpublishVolume(ctx context.Context, in *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, error)
	ValidateVolumeCapabilities(ctx context.Context, in *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, error)
	ListVolumes(ctx context.Context, in *ListVolumesRequest) (*ListVolumesResponse, error)
	GetCapacity(ctx context.Context, in *GetCapacityRequest) (*GetCapacityResponse, error)
	ControllerGetCapabilities(ctx context.Context, in *ControllerGetCapabilitiesRequest) (*ControllerGetCapabilitiesResponse, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	ControllerExpandVolume(ctx context.Context, in *ControllerExpandVolumeRequest) (*ControllerExpandVolumeResponse, error)
	ControllerGetVolume(ctx context.Context, in *ControllerGetVolumeRequest) (*ControllerGetVolumeResponse, error)
}

type srpcControllerClient struct {
	cc        srpc.Client
	serviceID string
}

func NewSRPCControllerClient(cc srpc.Client) SRPCControllerClient {
	return &srpcControllerClient{cc: cc, serviceID: SRPCControllerServiceID}
}

func NewSRPCControllerClientWithServiceID(cc srpc.Client, serviceID string) SRPCControllerClient {
	if serviceID == "" {
		serviceID = SRPCControllerServiceID
	}
	return &srpcControllerClient{cc: cc, serviceID: serviceID}
}

func (c *srpcControllerClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcControllerClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest) (*CreateVolumeResponse, error) {
	out := new(CreateVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "CreateVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	out := new(DeleteVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "DeleteVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) ControllerPublishVolume(ctx context.Context, in *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, error) {
	out := new(ControllerPublishVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "ControllerPublishVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) ControllerUnpublishVolume(ctx context.Context, in *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, error) {
	out := new(ControllerUnpublishVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "ControllerUnpublishVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) ValidateVolumeCapabilities(ctx context.Context, in *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, error) {
	out := new(ValidateVolumeCapabilitiesResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "ValidateVolumeCapabilities", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) ListVolumes(ctx context.Context, in *ListVolumesRequest) (*ListVolumesResponse, error) {
	out := new(ListVolumesResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "ListVolumes", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) GetCapacity(ctx context.Context, in *GetCapacityRequest) (*GetCapacityResponse, error) {
	out := new(GetCapacityResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "GetCapacity", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) ControllerGetCapabilities(ctx context.Context, in *ControllerGetCapabilitiesRequest) (*ControllerGetCapabilitiesResponse, error) {
	out := new(ControllerGetCapabilitiesResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "ControllerGetCapabilities", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "CreateSnapshot", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	out := new(DeleteSnapshotResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "DeleteSnapshot", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	out := new(ListSnapshotsResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "ListSnapshots", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) ControllerExpandVolume(ctx context.Context, in *ControllerExpandVolumeRequest) (*ControllerExpandVolumeResponse, error) {
	out := new(ControllerExpandVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "ControllerExpandVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcControllerClient) ControllerGetVolume(ctx context.Context, in *ControllerGetVolumeRequest) (*ControllerGetVolumeResponse, error) {
	out := new(ControllerGetVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "ControllerGetVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type SRPCControllerServer interface {
	CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	ControllerPublishVolume(context.Context, *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, error)
	ControllerUnpublishVolume(context.Context, *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, error)
	ValidateVolumeCapabilities(context.Context, *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, error)
	ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error)
	GetCapacity(context.Context, *GetCapacityRequest) (*GetCapacityResponse, error)
	ControllerGetCapabilities(context.Context, *ControllerGetCapabilitiesRequest) (*ControllerGetCapabilitiesResponse, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	ControllerExpandVolume(context.Context, *ControllerExpandVolumeRequest) (*ControllerExpandVolumeResponse, error)
	ControllerGetVolume(context.Context, *ControllerGetVolumeRequest) (*ControllerGetVolumeResponse, error)
}

type SRPCControllerUnimplementedServer struct{}

func (s *SRPCControllerUnimplementedServer) CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) ControllerPublishVolume(context.Context, *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) ControllerUnpublishVolume(context.Context, *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) ValidateVolumeCapabilities(context.Context, *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) GetCapacity(context.Context, *GetCapacityRequest) (*GetCapacityResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) ControllerGetCapabilities(context.Context, *ControllerGetCapabilitiesRequest) (*ControllerGetCapabilitiesResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) ControllerExpandVolume(context.Context, *ControllerExpandVolumeRequest) (*ControllerExpandVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCControllerUnimplementedServer) ControllerGetVolume(context.Context, *ControllerGetVolumeRequest) (*ControllerGetVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

const SRPCControllerServiceID = "csi.v1.Controller"

type SRPCControllerHandler struct {
	serviceID string
	impl      SRPCControllerServer
}

// NewSRPCControllerHandler constructs a new RPC handler.
// serviceID: if empty, uses default: csi.v1.Controller
func NewSRPCControllerHandler(impl SRPCControllerServer, serviceID string) srpc.Handler {
	if serviceID == "" {
		serviceID = SRPCControllerServiceID
	}
	return &SRPCControllerHandler{impl: impl, serviceID: serviceID}
}

// SRPCRegisterController registers the implementation with the mux.
// Uses the default serviceID: csi.v1.Controller
func SRPCRegisterController(mux srpc.Mux, impl SRPCControllerServer) error {
	return mux.Register(NewSRPCControllerHandler(impl, ""))
}

func (d *SRPCControllerHandler) GetServiceID() string { return d.serviceID }

func (SRPCControllerHandler) GetMethodIDs() []string {
	return []string{
		"CreateVolume",
		"DeleteVolume",
		"ControllerPublishVolume",
		"ControllerUnpublishVolume",
		"ValidateVolumeCapabilities",
		"ListVolumes",
		"GetCapacity",
		"ControllerGetCapabilities",
		"CreateSnapshot",
		"DeleteSnapshot",
		"ListSnapshots",
		"ControllerExpandVolume",
		"ControllerGetVolume",
	}
}

func (d *SRPCControllerHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "CreateVolume":
		return true, d.InvokeMethod_CreateVolume(d.impl, strm)
	case "DeleteVolume":
		return true, d.InvokeMethod_DeleteVolume(d.impl, strm)
	case "ControllerPublishVolume":
		return true, d.InvokeMethod_ControllerPublishVolume(d.impl, strm)
	case "ControllerUnpublishVolume":
		return true, d.InvokeMethod_ControllerUnpublishVolume(d.impl, strm)
	case "ValidateVolumeCapabilities":
		return true, d.InvokeMethod_ValidateVolumeCapabilities(d.impl, strm)
	case "ListVolumes":
		return true, d.InvokeMethod_ListVolumes(d.impl, strm)
	case "GetCapacity":
		return true, d.InvokeMethod_GetCapacity(d.impl, strm)
	case "ControllerGetCapabilities":
		return true, d.InvokeMethod_ControllerGetCapabilities(d.impl, strm)
	case "CreateSnapshot":
		return true, d.InvokeMethod_CreateSnapshot(d.impl, strm)
	case "DeleteSnapshot":
		return true, d.InvokeMethod_DeleteSnapshot(d.impl, strm)
	case "ListSnapshots":
		return true, d.InvokeMethod_ListSnapshots(d.impl, strm)
	case "ControllerExpandVolume":
		return true, d.InvokeMethod_ControllerExpandVolume(d.impl, strm)
	case "ControllerGetVolume":
		return true, d.InvokeMethod_ControllerGetVolume(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCControllerHandler) InvokeMethod_CreateVolume(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(CreateVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.CreateVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_DeleteVolume(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(DeleteVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.DeleteVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_ControllerPublishVolume(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(ControllerPublishVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ControllerPublishVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_ControllerUnpublishVolume(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(ControllerUnpublishVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ControllerUnpublishVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_ValidateVolumeCapabilities(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(ValidateVolumeCapabilitiesRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ValidateVolumeCapabilities(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_ListVolumes(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(ListVolumesRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ListVolumes(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_GetCapacity(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(GetCapacityRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.GetCapacity(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_ControllerGetCapabilities(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(ControllerGetCapabilitiesRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ControllerGetCapabilities(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_CreateSnapshot(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(CreateSnapshotRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.CreateSnapshot(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_DeleteSnapshot(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(DeleteSnapshotRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.DeleteSnapshot(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_ListSnapshots(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(ListSnapshotsRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ListSnapshots(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_ControllerExpandVolume(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(ControllerExpandVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ControllerExpandVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCControllerHandler) InvokeMethod_ControllerGetVolume(impl SRPCControllerServer, strm srpc.Stream) error {
	req := new(ControllerGetVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.ControllerGetVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

type SRPCController_CreateVolumeStream interface {
	srpc.Stream
	SendAndClose(*CreateVolumeResponse) error
}

type srpcController_CreateVolumeStream struct {
	srpc.Stream
}

func (x *srpcController_CreateVolumeStream) SendAndClose(m *CreateVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_DeleteVolumeStream interface {
	srpc.Stream
	SendAndClose(*DeleteVolumeResponse) error
}

type srpcController_DeleteVolumeStream struct {
	srpc.Stream
}

func (x *srpcController_DeleteVolumeStream) SendAndClose(m *DeleteVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_ControllerPublishVolumeStream interface {
	srpc.Stream
	SendAndClose(*ControllerPublishVolumeResponse) error
}

type srpcController_ControllerPublishVolumeStream struct {
	srpc.Stream
}

func (x *srpcController_ControllerPublishVolumeStream) SendAndClose(m *ControllerPublishVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_ControllerUnpublishVolumeStream interface {
	srpc.Stream
	SendAndClose(*ControllerUnpublishVolumeResponse) error
}

type srpcController_ControllerUnpublishVolumeStream struct {
	srpc.Stream
}

func (x *srpcController_ControllerUnpublishVolumeStream) SendAndClose(m *ControllerUnpublishVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_ValidateVolumeCapabilitiesStream interface {
	srpc.Stream
	SendAndClose(*ValidateVolumeCapabilitiesResponse) error
}

type srpcController_ValidateVolumeCapabilitiesStream struct {
	srpc.Stream
}

func (x *srpcController_ValidateVolumeCapabilitiesStream) SendAndClose(m *ValidateVolumeCapabilitiesResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_ListVolumesStream interface {
	srpc.Stream
	SendAndClose(*ListVolumesResponse) error
}

type srpcController_ListVolumesStream struct {
	srpc.Stream
}

func (x *srpcController_ListVolumesStream) SendAndClose(m *ListVolumesResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_GetCapacityStream interface {
	srpc.Stream
	SendAndClose(*GetCapacityResponse) error
}

type srpcController_GetCapacityStream struct {
	srpc.Stream
}

func (x *srpcController_GetCapacityStream) SendAndClose(m *GetCapacityResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_ControllerGetCapabilitiesStream interface {
	srpc.Stream
	SendAndClose(*ControllerGetCapabilitiesResponse) error
}

type srpcController_ControllerGetCapabilitiesStream struct {
	srpc.Stream
}

func (x *srpcController_ControllerGetCapabilitiesStream) SendAndClose(m *ControllerGetCapabilitiesResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_CreateSnapshotStream interface {
	srpc.Stream
	SendAndClose(*CreateSnapshotResponse) error
}

type srpcController_CreateSnapshotStream struct {
	srpc.Stream
}

func (x *srpcController_CreateSnapshotStream) SendAndClose(m *CreateSnapshotResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_DeleteSnapshotStream interface {
	srpc.Stream
	SendAndClose(*DeleteSnapshotResponse) error
}

type srpcController_DeleteSnapshotStream struct {
	srpc.Stream
}

func (x *srpcController_DeleteSnapshotStream) SendAndClose(m *DeleteSnapshotResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_ListSnapshotsStream interface {
	srpc.Stream
	SendAndClose(*ListSnapshotsResponse) error
}

type srpcController_ListSnapshotsStream struct {
	srpc.Stream
}

func (x *srpcController_ListSnapshotsStream) SendAndClose(m *ListSnapshotsResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_ControllerExpandVolumeStream interface {
	srpc.Stream
	SendAndClose(*ControllerExpandVolumeResponse) error
}

type srpcController_ControllerExpandVolumeStream struct {
	srpc.Stream
}

func (x *srpcController_ControllerExpandVolumeStream) SendAndClose(m *ControllerExpandVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCController_ControllerGetVolumeStream interface {
	srpc.Stream
	SendAndClose(*ControllerGetVolumeResponse) error
}

type srpcController_ControllerGetVolumeStream struct {
	srpc.Stream
}

func (x *srpcController_ControllerGetVolumeStream) SendAndClose(m *ControllerGetVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNodeClient interface {
	SRPCClient() srpc.Client

	NodeStageVolume(ctx context.Context, in *NodeStageVolumeRequest) (*NodeStageVolumeResponse, error)
	NodeUnstageVolume(ctx context.Context, in *NodeUnstageVolumeRequest) (*NodeUnstageVolumeResponse, error)
	NodePublishVolume(ctx context.Context, in *NodePublishVolumeRequest) (*NodePublishVolumeResponse, error)
	NodeUnpublishVolume(ctx context.Context, in *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, error)
	NodeGetVolumeStats(ctx context.Context, in *NodeGetVolumeStatsRequest) (*NodeGetVolumeStatsResponse, error)
	NodeExpandVolume(ctx context.Context, in *NodeExpandVolumeRequest) (*NodeExpandVolumeResponse, error)
	NodeGetCapabilities(ctx context.Context, in *NodeGetCapabilitiesRequest) (*NodeGetCapabilitiesResponse, error)
	NodeGetInfo(ctx context.Context, in *NodeGetInfoRequest) (*NodeGetInfoResponse, error)
}

type srpcNodeClient struct {
	cc        srpc.Client
	serviceID string
}

func NewSRPCNodeClient(cc srpc.Client) SRPCNodeClient {
	return &srpcNodeClient{cc: cc, serviceID: SRPCNodeServiceID}
}

func NewSRPCNodeClientWithServiceID(cc srpc.Client, serviceID string) SRPCNodeClient {
	if serviceID == "" {
		serviceID = SRPCNodeServiceID
	}
	return &srpcNodeClient{cc: cc, serviceID: serviceID}
}

func (c *srpcNodeClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcNodeClient) NodeStageVolume(ctx context.Context, in *NodeStageVolumeRequest) (*NodeStageVolumeResponse, error) {
	out := new(NodeStageVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "NodeStageVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeClient) NodeUnstageVolume(ctx context.Context, in *NodeUnstageVolumeRequest) (*NodeUnstageVolumeResponse, error) {
	out := new(NodeUnstageVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "NodeUnstageVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeClient) NodePublishVolume(ctx context.Context, in *NodePublishVolumeRequest) (*NodePublishVolumeResponse, error) {
	out := new(NodePublishVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "NodePublishVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeClient) NodeUnpublishVolume(ctx context.Context, in *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, error) {
	out := new(NodeUnpublishVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "NodeUnpublishVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeClient) NodeGetVolumeStats(ctx context.Context, in *NodeGetVolumeStatsRequest) (*NodeGetVolumeStatsResponse, error) {
	out := new(NodeGetVolumeStatsResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "NodeGetVolumeStats", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeClient) NodeExpandVolume(ctx context.Context, in *NodeExpandVolumeRequest) (*NodeExpandVolumeResponse, error) {
	out := new(NodeExpandVolumeResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "NodeExpandVolume", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeClient) NodeGetCapabilities(ctx context.Context, in *NodeGetCapabilitiesRequest) (*NodeGetCapabilitiesResponse, error) {
	out := new(NodeGetCapabilitiesResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "NodeGetCapabilities", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srpcNodeClient) NodeGetInfo(ctx context.Context, in *NodeGetInfoRequest) (*NodeGetInfoResponse, error) {
	out := new(NodeGetInfoResponse)
	err := c.cc.ExecCall(ctx, c.serviceID, "NodeGetInfo", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type SRPCNodeServer interface {
	NodeStageVolume(context.Context, *NodeStageVolumeRequest) (*NodeStageVolumeResponse, error)
	NodeUnstageVolume(context.Context, *NodeUnstageVolumeRequest) (*NodeUnstageVolumeResponse, error)
	NodePublishVolume(context.Context, *NodePublishVolumeRequest) (*NodePublishVolumeResponse, error)
	NodeUnpublishVolume(context.Context, *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, error)
	NodeGetVolumeStats(context.Context, *NodeGetVolumeStatsRequest) (*NodeGetVolumeStatsResponse, error)
	NodeExpandVolume(context.Context, *NodeExpandVolumeRequest) (*NodeExpandVolumeResponse, error)
	NodeGetCapabilities(context.Context, *NodeGetCapabilitiesRequest) (*NodeGetCapabilitiesResponse, error)
	NodeGetInfo(context.Context, *NodeGetInfoRequest) (*NodeGetInfoResponse, error)
}

type SRPCNodeUnimplementedServer struct{}

func (s *SRPCNodeUnimplementedServer) NodeStageVolume(context.Context, *NodeStageVolumeRequest) (*NodeStageVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeUnimplementedServer) NodeUnstageVolume(context.Context, *NodeUnstageVolumeRequest) (*NodeUnstageVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeUnimplementedServer) NodePublishVolume(context.Context, *NodePublishVolumeRequest) (*NodePublishVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeUnimplementedServer) NodeUnpublishVolume(context.Context, *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeUnimplementedServer) NodeGetVolumeStats(context.Context, *NodeGetVolumeStatsRequest) (*NodeGetVolumeStatsResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeUnimplementedServer) NodeExpandVolume(context.Context, *NodeExpandVolumeRequest) (*NodeExpandVolumeResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeUnimplementedServer) NodeGetCapabilities(context.Context, *NodeGetCapabilitiesRequest) (*NodeGetCapabilitiesResponse, error) {
	return nil, srpc.ErrUnimplemented
}

func (s *SRPCNodeUnimplementedServer) NodeGetInfo(context.Context, *NodeGetInfoRequest) (*NodeGetInfoResponse, error) {
	return nil, srpc.ErrUnimplemented
}

const SRPCNodeServiceID = "csi.v1.Node"

type SRPCNodeHandler struct {
	serviceID string
	impl      SRPCNodeServer
}

// NewSRPCNodeHandler constructs a new RPC handler.
// serviceID: if empty, uses default: csi.v1.Node
func NewSRPCNodeHandler(impl SRPCNodeServer, serviceID string) srpc.Handler {
	if serviceID == "" {
		serviceID = SRPCNodeServiceID
	}
	return &SRPCNodeHandler{impl: impl, serviceID: serviceID}
}

// SRPCRegisterNode registers the implementation with the mux.
// Uses the default serviceID: csi.v1.Node
func SRPCRegisterNode(mux srpc.Mux, impl SRPCNodeServer) error {
	return mux.Register(NewSRPCNodeHandler(impl, ""))
}

func (d *SRPCNodeHandler) GetServiceID() string { return d.serviceID }

func (SRPCNodeHandler) GetMethodIDs() []string {
	return []string{
		"NodeStageVolume",
		"NodeUnstageVolume",
		"NodePublishVolume",
		"NodeUnpublishVolume",
		"NodeGetVolumeStats",
		"NodeExpandVolume",
		"NodeGetCapabilities",
		"NodeGetInfo",
	}
}

func (d *SRPCNodeHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "NodeStageVolume":
		return true, d.InvokeMethod_NodeStageVolume(d.impl, strm)
	case "NodeUnstageVolume":
		return true, d.InvokeMethod_NodeUnstageVolume(d.impl, strm)
	case "NodePublishVolume":
		return true, d.InvokeMethod_NodePublishVolume(d.impl, strm)
	case "NodeUnpublishVolume":
		return true, d.InvokeMethod_NodeUnpublishVolume(d.impl, strm)
	case "NodeGetVolumeStats":
		return true, d.InvokeMethod_NodeGetVolumeStats(d.impl, strm)
	case "NodeExpandVolume":
		return true, d.InvokeMethod_NodeExpandVolume(d.impl, strm)
	case "NodeGetCapabilities":
		return true, d.InvokeMethod_NodeGetCapabilities(d.impl, strm)
	case "NodeGetInfo":
		return true, d.InvokeMethod_NodeGetInfo(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCNodeHandler) InvokeMethod_NodeStageVolume(impl SRPCNodeServer, strm srpc.Stream) error {
	req := new(NodeStageVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NodeStageVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeHandler) InvokeMethod_NodeUnstageVolume(impl SRPCNodeServer, strm srpc.Stream) error {
	req := new(NodeUnstageVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NodeUnstageVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeHandler) InvokeMethod_NodePublishVolume(impl SRPCNodeServer, strm srpc.Stream) error {
	req := new(NodePublishVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NodePublishVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeHandler) InvokeMethod_NodeUnpublishVolume(impl SRPCNodeServer, strm srpc.Stream) error {
	req := new(NodeUnpublishVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NodeUnpublishVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeHandler) InvokeMethod_NodeGetVolumeStats(impl SRPCNodeServer, strm srpc.Stream) error {
	req := new(NodeGetVolumeStatsRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NodeGetVolumeStats(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeHandler) InvokeMethod_NodeExpandVolume(impl SRPCNodeServer, strm srpc.Stream) error {
	req := new(NodeExpandVolumeRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NodeExpandVolume(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeHandler) InvokeMethod_NodeGetCapabilities(impl SRPCNodeServer, strm srpc.Stream) error {
	req := new(NodeGetCapabilitiesRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NodeGetCapabilities(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

func (SRPCNodeHandler) InvokeMethod_NodeGetInfo(impl SRPCNodeServer, strm srpc.Stream) error {
	req := new(NodeGetInfoRequest)
	if err := strm.MsgRecv(req); err != nil {
		return err
	}
	out, err := impl.NodeGetInfo(strm.Context(), req)
	if err != nil {
		return err
	}
	return strm.MsgSend(out)
}

type SRPCNode_NodeStageVolumeStream interface {
	srpc.Stream
	SendAndClose(*NodeStageVolumeResponse) error
}

type srpcNode_NodeStageVolumeStream struct {
	srpc.Stream
}

func (x *srpcNode_NodeStageVolumeStream) SendAndClose(m *NodeStageVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNode_NodeUnstageVolumeStream interface {
	srpc.Stream
	SendAndClose(*NodeUnstageVolumeResponse) error
}

type srpcNode_NodeUnstageVolumeStream struct {
	srpc.Stream
}

func (x *srpcNode_NodeUnstageVolumeStream) SendAndClose(m *NodeUnstageVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNode_NodePublishVolumeStream interface {
	srpc.Stream
	SendAndClose(*NodePublishVolumeResponse) error
}

type srpcNode_NodePublishVolumeStream struct {
	srpc.Stream
}

func (x *srpcNode_NodePublishVolumeStream) SendAndClose(m *NodePublishVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNode_NodeUnpublishVolumeStream interface {
	srpc.Stream
	SendAndClose(*NodeUnpublishVolumeResponse) error
}

type srpcNode_NodeUnpublishVolumeStream struct {
	srpc.Stream
}

func (x *srpcNode_NodeUnpublishVolumeStream) SendAndClose(m *NodeUnpublishVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNode_NodeGetVolumeStatsStream interface {
	srpc.Stream
	SendAndClose(*NodeGetVolumeStatsResponse) error
}

type srpcNode_NodeGetVolumeStatsStream struct {
	srpc.Stream
}

func (x *srpcNode_NodeGetVolumeStatsStream) SendAndClose(m *NodeGetVolumeStatsResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNode_NodeExpandVolumeStream interface {
	srpc.Stream
	SendAndClose(*NodeExpandVolumeResponse) error
}

type srpcNode_NodeExpandVolumeStream struct {
	srpc.Stream
}

func (x *srpcNode_NodeExpandVolumeStream) SendAndClose(m *NodeExpandVolumeResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNode_NodeGetCapabilitiesStream interface {
	srpc.Stream
	SendAndClose(*NodeGetCapabilitiesResponse) error
}

type srpcNode_NodeGetCapabilitiesStream struct {
	srpc.Stream
}

func (x *srpcNode_NodeGetCapabilitiesStream) SendAndClose(m *NodeGetCapabilitiesResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type SRPCNode_NodeGetInfoStream interface {
	srpc.Stream
	SendAndClose(*NodeGetInfoResponse) error
}

type srpcNode_NodeGetInfoStream struct {
	srpc.Stream
}

func (x *srpcNode_NodeGetInfoStream) SendAndClose(m *NodeGetInfoResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}
